# COMMENTED OUT - Main CI Pipeline
# This workflow has been temporarily disabled to focus on specialized workflows
# Uncomment when needed for main CI pipeline functionality

#name: Main CI Pipeline
#
#on:
#  push:
#    branches: [ main, develop ]
#  pull_request:
#    branches: [ main, develop ]
#  release:
#    types: [ published ]
#
#env:
#  PYTHON_VERSION: '3.11'
#
#jobs:
#  # Basic Quality Check (Quick validation)
#  quick-quality:
#    name: Quick Quality Check
#    runs-on: ubuntu-latest
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: ${{ env.PYTHON_VERSION }}
#
#    - name: Cache pip dependencies
#      uses: actions/cache@v3
#      with:
#        path: ~/.cache/pip
#        key: ${{ runner.os }}-quick-pip-${{ hashFiles('**/requirements-dev.txt') }}
#        restore-keys: |
#          ${{ runner.os }}-quick-pip-
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements-dev.txt
#
#    - name: Quick syntax check
#      run: |
#        echo "üîç Running quick syntax validation..."
#        python -m py_compile src/**/*.py
#        echo "‚úÖ Syntax check passed"
#
#    - name: Quick import check
#      run: |
#        echo "üì¶ Checking imports..."
#        python -c "
#        import sys
#        sys.path.insert(0, 'src')
#        try:
#            import mcp_server
#            import streamlit_app
#            print('‚úÖ Main modules import successfully')
#        except ImportError as e:
#            print(f'‚ùå Import error: {e}')
#            sys.exit(1)
#        "
#
#    - name: Quick linting (Ruff only)
#      run: |
#        echo "‚ö° Running quick Ruff check..."
#        ruff check src/ tests/ --select=E,F,W --quiet
#        echo "‚úÖ Quick linting passed"
#
#  # Unit and Integration Tests
#  test:
#    name: Tests
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: ['3.9', '3.10', '3.11', '3.12']
#    
#    services:
#      redis:
#        image: redis:7-alpine
#        options: >-
#          --health-cmd "redis-cli ping"
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          - 6379:6379
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v4
#      with:
#        python-version: ${{ matrix.python-version }}
#
#    - name: Cache pip dependencies
#      uses: actions/cache@v3
#      with:
#        path: ~/.cache/pip
#        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
#        restore-keys: |
#          ${{ runner.os }}-${{ matrix.python-version }}-pip-
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements-dev.txt
#
#    - name: Run unit tests
#      run: |
#        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term
#      env:
#        REDIS_URL: redis://localhost:6379/0
#
#    - name: Run integration tests
#      run: |
#        pytest tests/integration/ -v
#      env:
#        REDIS_URL: redis://localhost:6379/0
#        SONARQUBE_URL: ${{ secrets.TEST_SONARQUBE_URL }}
#        SONARQUBE_TOKEN: ${{ secrets.TEST_SONARQUBE_TOKEN }}
#
#    - name: Upload coverage to Codecov
#      uses: codecov/codecov-action@v3
#      with:
#        file: ./coverage.xml
#        flags: unittests
#        name: codecov-umbrella
#        fail_ci_if_error: false
#
#
#  # Performance Tests (on main branch only)
#  performance:
#    name: Performance Tests
#    runs-on: ubuntu-latest
#    needs: [quick-quality, test]
#    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: ${{ env.PYTHON_VERSION }}
#
#    - name: Cache pip dependencies
#      uses: actions/cache@v3
#      with:
#        path: ~/.cache/pip
#        key: ${{ runner.os }}-perf-pip-${{ hashFiles('**/requirements-dev.txt') }}
#        restore-keys: |
#          ${{ runner.os }}-perf-pip-
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements-dev.txt
#
#    - name: Run performance tests
#      run: |
#        echo "üöÄ Running performance tests..."
#        
#        # Check if simple load test script exists
#        if [ -f "scripts/testing/simple-load-test.sh" ]; then
#          bash scripts/testing/simple-load-test.sh --users 5 --duration 30 --report
#        else
#          echo "‚ö†Ô∏è Simple load test script not found, skipping performance tests"
#        fi
#        
#        echo "‚úÖ Performance tests completed"
#
#    - name: Upload performance results
#      if: always()
#      uses: actions/upload-artifact@v3
#      with:
#        name: performance-test-results
#        path: |
#          load-test-results/
#        retention-days: 7