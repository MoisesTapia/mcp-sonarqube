# Production environment overrides for Docker Compose

services:
  # Production overrides for MCP Server
  mcp-server:
    environment:
      SERVER_DEBUG: false
      LOG_LEVEL: INFO
      CACHE_TTL: 300
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production overrides for Streamlit App
  streamlit-app:
    environment:
      STREAMLIT_SERVER_HEADLESS: true
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: false
      STREAMLIT_SERVER_ENABLE_CORS: false
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: true
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production overrides for SonarQube
  sonarqube:
    environment:
      SONAR_WEB_JAVAOPTS: -Xmx2G -Xms1G -XX:+UseG1GC
      SONAR_CE_JAVAOPTS: -Xmx2G -Xms1G -XX:+UseG1GC
      SONAR_SEARCH_JAVAOPTS: -Xmx1G -Xms1G
    restart: always
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
        window: 300s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Production overrides for PostgreSQL
  postgres:
    restart: always
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Production overrides for Redis
  redis:
    restart: always
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production overrides for Nginx (if nginx service is defined in base)
  # nginx:
  #   restart: always
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 256M
  #         cpus: '0.5'
  #       reservations:
  #         memory: 128M
  #         cpus: '0.25'
  #     restart_policy:
  #       condition: on-failure
  #       delay: 5s
  #       max_attempts: 3
  #       window: 60s
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "20m"
  #       max-file: "5"

  # Production overrides for Prometheus (if prometheus service is defined in base)
  # prometheus:
  #   restart: always
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=30d'
  #     - '--storage.tsdb.retention.size=10GB'
  #     - '--web.enable-lifecycle'
  #     - '--web.enable-admin-api'
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 1G
  #         cpus: '1.0'
  #       reservations:
  #         memory: 512M
  #         cpus: '0.5'
  #     restart_policy:
  #       condition: on-failure
  #       delay: 10s
  #       max_attempts: 3
  #       window: 120s
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "20m"
  #       max-file: "3"

  # Production overrides for Grafana (if grafana service is defined in base)
  # grafana:
  #   restart: always
  #   environment:
  #     GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
  #     GF_USERS_ALLOW_SIGN_UP: false
  #     GF_AUTH_ANONYMOUS_ENABLED: false
  #     GF_SECURITY_COOKIE_SECURE: true
  #     GF_SECURITY_COOKIE_SAMESITE: strict
  #     GF_SERVER_PROTOCOL: https
  #     GF_SERVER_CERT_FILE: /etc/ssl/certs/grafana.crt
  #     GF_SERVER_CERT_KEY: /etc/ssl/private/grafana.key
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 512M
  #         cpus: '0.5'
  #       reservations:
  #         memory: 256M
  #         cpus: '0.25'
  #     restart_policy:
  #       condition: on-failure
  #       delay: 10s
  #       max_attempts: 3
  #       window: 120s
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "20m"
  #       max-file: "3"

  # Add Alertmanager for production monitoring (optional - uncomment if needed)
  # alertmanager:
  #   image: prom/alertmanager:latest
  #   container_name: sonarqube-alertmanager
  #   restart: always
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'
  #     - '--storage.path=/alertmanager'
  #     - '--web.external-url=http://localhost:9093'
  #   volumes:
  #     - ../config/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
  #     - alertmanager_data:/alertmanager
  #   networks:
  #     - sonarqube-mcp
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 128M
  #         cpus: '0.25'
  #       reservations:
  #         memory: 64M
  #         cpus: '0.1'
  #     restart_policy:
  #       condition: on-failure
  #       delay: 5s
  #       max_attempts: 3
  #       window: 60s
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

# volumes:
#   alertmanager_data:
#     driver: local