# Monitoring services for SonarQube MCP
version: '3.8'

services:
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sonarqube-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-200h}'
      - '--web.enable-lifecycle'
    volumes:
      - ../config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../config/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - sonarqube-mcp
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${PROMETHEUS_MEMORY_LIMIT:-512M}
        reservations:
          memory: 256M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sonarqube-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: ${GRAFANA_ALLOW_SIGNUP:-false}
    volumes:
      - grafana_data:/var/lib/grafana
      - ../config/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ../config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - sonarqube-mcp
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${GRAFANA_MEMORY_LIMIT:-256M}
        reservations:
          memory: 128M

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: sonarqube-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - sonarqube-mcp
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: sonarqube-redis-exporter
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - sonarqube-mcp
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: sonarqube-postgres-exporter
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER:-sonarqube}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sonarqube}?sslmode=disable
    networks:
      - sonarqube-mcp
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M